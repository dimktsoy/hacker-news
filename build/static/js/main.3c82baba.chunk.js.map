{"version":3,"sources":["components/Button/index.js","components/Sort/index.js","components/Articles/index.js","components/Search/index.js","constants/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Button","type","onClick","children","className","defaultProps","Sort","onSort","sortKey","activeSortKey","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Articles","props","state","isSortReverse","bind","this","setState","onDismiss","sortedList","reverseSortedList","map","item","key","objectID","href","url","title","author","date","pos","indexOf","slice","split","join","formatDate","created_at","points","num_comments","React","Component","Search","inputReft","createRef","current","focus","value","onSubmit","onChange","ref","PATH_BASE","App","result","searchTerm","isLoading","error","onSearchChange","onSearchSubmit","fetchSearchTopStories","setSearchTopStories","event","target","preventDefault","id","updatedList","hits","filter","page","prevResult","oldHits","axios","then","data","catch","icon","faSpinner","size","spin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3c82baba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.scss';\n\nfunction Button({\n  type,\n  onClick,\n  children,\n  className,\n}) {\n  return (\n    // eslint-disable-next-line react/button-has-type\n    <button\n      className={className}\n      type={type}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  type: 'button',\n  onClick: () => null,\n  children: 'Button',\n  className: 'button',\n};\n\nButton.propTypes = {\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../Button';\n\nfunction Sort({\n  onSort, sortKey, children, activeSortKey,\n}) {\n  return (\n    <Button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onSort(sortKey)}\n    >\n      {children}\n    </Button>\n  );\n}\n\nSort.propTypes = {\n  onSort: PropTypes.func,\n  sortKey: PropTypes.string,\n  children: PropTypes.node,\n  activeSortKey: PropTypes.string,\n};\n\nexport default Sort;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'lodash';\nimport './index.scss';\n\nimport Sort from '../Sort';\nimport Button from '../Button';\n\nconst SORTS = {\n  NONE: (list) => list,\n  TITLE: (list) => sortBy(list, 'title'),\n  AUTHOR: (list) => sortBy(list, 'author'),\n  COMMENTS: (list) => sortBy(list, 'num_comments').reverse(),\n  POINTS: (list) => sortBy(list, 'points').reverse(),\n};\n\nconst formatDate = (date) => {\n  const pos = date.indexOf('T');\n  const dateResult = date.slice(0, pos).split('-').reverse().join('.');\n  return dateResult;\n};\n\nclass Articles extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });\n  }\n\n  render() {\n    const { list, onDismiss } = this.props;\n    const { sortKey, isSortReverse } = this.state;\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\n\n    return (\n      <div className=\"articles\">\n        <ul className=\"articles__sort\">\n          <li>\n            <Sort\n              sortKey=\"TITLE\"\n              onSort={this.onSort}\n            >\n              Title\n            </Sort>\n          </li>\n          <li>\n            <Sort\n              sortKey=\"AUTHOR\"\n              onSort={this.onSort}\n            >\n              Author\n            </Sort>\n          </li>\n          <li>\n            <Sort\n              sortKey=\"COMMENTS\"\n              onSort={this.onSort}\n            >\n              Comments\n            </Sort>\n          </li>\n          <li>\n            <Sort\n              sortKey=\"POINTS\"\n              onSort={this.onSort}\n            >\n              Points\n            </Sort>\n          </li>\n        </ul>\n        <ul className=\"articles__list\">\n          {reverseSortedList.map((item) => (\n            <li\n              className=\"articles__item\"\n              key={item.objectID}\n            >\n              <h3 className=\"articles__title\"><a href={item.url}>{item.title}</a></h3>\n              <div className=\"articles__meta\">\n                <span className=\"articles__meta-item articles__meta-item--author\">{item.author}</span>\n                <span className=\"articles__meta-item\">{formatDate(item.created_at)}</span>\n                <span className=\"articles__meta-item\">\n                  {item.points}\n                  &nbsp;points\n                </span>\n                <span className=\"articles__meta-item\">\n                  {item.num_comments}\n                  &nbsp;comments\n                </span>\n              </div>\n              <Button\n                onClick={() => onDismiss(item.objectID)}\n                type=\"button\"\n                className=\"button\"\n              >\n                Dismiss\n              </Button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nArticles.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDismiss: PropTypes.func.isRequired,\n};\n\nexport default Articles;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.scss';\n\nimport Button from '../Button';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputReft = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.inputReft.current) {\n      this.inputReft.current.focus();\n    }\n  }\n\n  render() {\n    const { value, onSubmit, onChange } = this.props;\n\n    return (\n      <form\n        className=\"search\"\n        onSubmit={onSubmit}\n      >\n        <input\n          className=\"search__control\"\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={this.inputReft}\n        />\n        <Button\n          className=\"button button--primary\"\n          type=\"submit\"\n        >\n          Search\n        </Button>\n      </form>\n    );\n  }\n}\n\nSearch.propTypes = {\n  value: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Search;\n","export const DEFAULT_QUERY = 'react';\nexport const DEFAULT_HPP = '5';\nexport const DEFAULT_PAGE = '0';\n\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';\n","import React from 'react';\nimport axios from 'axios';\nimport './index.scss';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport Articles from '../Articles';\nimport Search from '../Search';\nimport Button from '../Button';\n\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  DEFAULT_PAGE,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PARAM_PAGE,\n  PARAM_HPP,\n} from '../../constants';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY,\n      isLoading: false,\n      error: null,\n    };\n\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.fetchSearchTopStories(searchTerm, DEFAULT_PAGE);\n  }\n\n  onSearchChange(event) {\n    this.setState({\n      searchTerm: event.target.value,\n    });\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.fetchSearchTopStories(searchTerm);\n    event.preventDefault();\n  }\n\n  onDismiss(id) {\n    const { result } = this.state;\n    const isNotID = (item) => item.objectID !== id;\n    const updatedList = result.hits.filter(isNotID);\n    this.setState({\n      result: { ...result, hits: updatedList },\n    });\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    const { result: prevResult } = this.state;\n    const oldHits = page !== 0 ? prevResult.hits : [];\n    const updatedList = [...oldHits, ...hits];\n    this.setState({\n      result: {\n        hits: updatedList,\n        page,\n      },\n      isLoading: false,\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true });\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then((result) => this.setSearchTopStories(result.data))\n      .catch((error) => this.setState({ error }));\n  }\n\n  render() {\n    const {\n      result,\n      searchTerm,\n      isLoading,\n      error,\n    } = this.state;\n    const page = (result && result.page) || 0;\n    const list = (result && result.hits) || [];\n\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <div className=\"app__container\">\n            <Search\n              value={searchTerm}\n              onChange={this.onSearchChange}\n              onSubmit={this.onSearchSubmit}\n            >\n              Search\n            </Search>\n          </div>\n        </header>\n        <div className=\"app__content\">\n          <div className=\"app__container\">\n            { error\n              ? <h2>Something went wrong!</h2>\n              : (\n                <Articles\n                  list={list}\n                  onDismiss={this.onDismiss}\n                />\n              )}\n          </div>\n          <div className=\"app__bottom\">\n            { isLoading\n              ? <FontAwesomeIcon icon={faSpinner} size=\"lg\" spin />\n              : (\n                <Button\n                  onClick={() => this.fetchSearchTopStories(searchTerm, page + 1)}\n                  className=\"button button--primary\"\n                  type=\"button\"\n                >\n                  More\n                </Button>\n              )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}